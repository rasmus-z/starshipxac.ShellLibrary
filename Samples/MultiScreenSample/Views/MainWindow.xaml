<Window x:Class="MultiScreenSample.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
        xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
        xmlns:interactivity="clr-namespace:Reactive.Bindings.Interactivity;assembly=ReactiveProperty.NET45"
        xmlns:viewModels="clr-namespace:MultiScreenSample.ViewModels"
        xmlns:converters="clr-namespace:MultiScreenSample.Views.Converters"
        Title="MainWindow" Height="350" Width="525">
    
    <Window.DataContext>
        <viewModels:MainWindowViewModel/>
    </Window.DataContext>

    <VisualStateManager.VisualStateGroups>
        <VisualStateGroup x:Name="WindowStates">
            <VisualState x:Name="Normal" />
            <VisualState x:Name="FullScreen" />
        </VisualStateGroup>
    </VisualStateManager.VisualStateGroups>

    <i:Interaction.Triggers>
    
    	<!--Viewに特別な要件が存在しない限りは、トリガーやアクションの自作にこだわらず積極的にコードビハインドを使いましょう -->
    	<!--Viewのコードビハインドは、基本的にView内で完結するロジックとViewModelからのイベントの受信(専用リスナを使用する)に限るとトラブルが少なくなります -->
    	<!--Livet1.1からはコードビハインドでViewModelのイベントを受信するためのWeakEventLisnterサポートが追加されています --> 
        
        <!--WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます-->
        <i:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="Initialize"/>
        </i:EventTrigger>

        <!--Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます-->
        <i:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction/>
        </i:EventTrigger>
        
        <i:EventTrigger EventName="CustomWindowStateChanged">
            <interactivity:EventToReactiveProperty ReactiveProperty="{Binding CustomWindowState}">
                <converters:CustomWindowStateConverter/>
            </interactivity:EventToReactiveProperty>
        </i:EventTrigger>

        <!--WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください-->

    </i:Interaction.Triggers>

    <Grid>
        <Grid.Resources>
            <Style TargetType="Button">
                <Setter Property="Padding" Value="24,4"/>
                <Setter Property="Margin" Value="4"/>
            </Style>
        </Grid.Resources>
        <StackPanel HorizontalAlignment="Left">
            <Button Command="{Binding CloseCommand, Mode=OneWay}">Close</Button>
            <Button Command="{Binding FullScreenCommand, Mode=OneWay}">FullScreen</Button>
            <Button Command="{Binding RestoreCommand, Mode=OneWay}">Restore</Button>
            <Button Command="{Binding MaximizeCommand, Mode=OneWay}">Maximize</Button>
            <Button Command="{Binding MinimizeCommand, Mode=OneWay}">Minimize</Button>
        </StackPanel>
    </Grid>
</Window>
